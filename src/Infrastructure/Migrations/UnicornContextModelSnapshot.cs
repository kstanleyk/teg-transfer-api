// <auto-generated />
using System;
using Agrovet.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Unicorn.Infrastructure.Migrations
{
    [DbContext(typeof(AgrovetContext))]
    partial class UnicornContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("feature");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<bool>("IsBasic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_basic");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("Feature", "Action")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_feature_action");

                    b.ToTable("permission", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name");

                    b.ToTable("role", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(150)")
                        .HasColumnName("permission_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(355)
                        .HasColumnType("character varying(355)")
                        .HasColumnName("profile_image_url");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("telephone");

                    b.HasKey("Id")
                        .HasName("pk_branch");

                    b.ToTable("branch", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.DialogMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.HasKey("Id", "Lid")
                        .HasName("pk_dialog_message");

                    b.ToTable("dialog_message", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.MonthName", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.HasKey("Id", "Lid")
                        .HasName("pk_month_name");

                    b.ToTable("month_name", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.AverageWeight", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Estate")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate");

                    b.Property<string>("Block")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("block");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id", "Estate", "Block")
                        .HasName("pk_average_weight");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_average_weight_public_id");

                    b.ToTable("average_weight", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Block", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<double>("BlockSize")
                        .HasColumnType("double precision")
                        .HasColumnName("block_size");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateEstablished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_established");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Estate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double>("TreeNumber")
                        .HasColumnType("double precision")
                        .HasColumnName("tree_number");

                    b.HasKey("Id")
                        .HasName("pk_block");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_block_public_id");

                    b.ToTable("block", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Estate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("DateEstablished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_established");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_estate");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_estate_public_id");

                    b.ToTable("estate", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.EstateTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id");

                    b.Property<string>("TaskId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("task_id");

                    b.Property<string>("EstateId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.HasKey("Id", "TaskId", "EstateId")
                        .HasName("pk_estate_task");

                    b.ToTable("estate_task", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.EstateTaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("TaskTypeId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("task_type_id");

                    b.Property<string>("EstateId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate_id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id", "TaskTypeId", "EstateId")
                        .HasName("pk_estate_task_type");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_estate_task_type_public_id");

                    b.ToTable("estate_task_type", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.ExpenseSource", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_expense_source");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_expense_source_public_id");

                    b.ToTable("expense_source", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.ExpenseStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_expense_status");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_expense_status_public_id");

                    b.ToTable("expense_status", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.ExpenseType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("account");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("InventoryStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_status");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_expense_type");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_expense_type_public_id");

                    b.ToTable("expense_type", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.ExpenseTypeInventory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("ExpenseType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("expense_type");

                    b.Property<string>("InventoryItem")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("inventory_item");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id", "ExpenseType", "InventoryItem")
                        .HasName("pk_expense_type_inventory");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_expense_type_inventory_public_id");

                    b.ToTable("expense_type_inventory", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.HarvestConfig", b =>
                {
                    b.Property<string>("HarvestId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("harvest_id");

                    b.Property<string>("CarryingId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("carrying_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("HarvestId", "CarryingId")
                        .HasName("pk_harvest_config");

                    b.ToTable("harvest_config", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Operation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("id");

                    b.Property<string>("Line")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("line");

                    b.Property<string>("Payroll")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("payroll");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("block");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Employee")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("employee");

                    b.Property<string>("Estate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("item");

                    b.Property<string>("MillingCycle")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("milling_cycle");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("SyncReference")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("sync_reference");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.HasKey("Id", "Line", "Payroll")
                        .HasName("pk_operation");

                    b.ToTable("operation", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Payroll", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<double>("DaysInMonth")
                        .HasColumnType("double precision")
                        .HasColumnName("days_in_month");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("PayMonth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("pay_month");

                    b.Property<string>("PayPeriod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pay_period");

                    b.Property<double>("PayrollDays")
                        .HasColumnType("double precision")
                        .HasColumnName("payroll_days");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("remark");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("status");

                    b.Property<string>("TransYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("trans_year");

                    b.HasKey("Id")
                        .HasName("pk_payroll");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_payroll_public_id");

                    b.ToTable("payroll", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.PayrollAverageWeight", b =>
                {
                    b.Property<string>("PayrollId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("payroll_id");

                    b.Property<string>("EstateId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate_id");

                    b.Property<string>("BlockId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("block_id");

                    b.Property<double>("AverageFruitBunchWeight")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("double precision")
                        .HasColumnName("average_fruit_bunch_weight");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("PayrollId", "EstateId", "BlockId")
                        .HasName("pk_payroll_average_weight");

                    b.ToTable("payroll_average_weight", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Block")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("block");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<double>("Number")
                        .HasColumnType("double precision")
                        .HasColumnName("number");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("status");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.HasKey("Id")
                        .HasName("pk_plant");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_plant_public_id");

                    b.ToTable("plant", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.Task", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("task_type");

                    b.HasKey("Id")
                        .HasName("pk_task");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_task_public_id");

                    b.ToTable("task", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.TaskType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("account");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("uuid")
                        .HasColumnName("public_id");

                    b.HasKey("Id")
                        .HasName("pk_task_type");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_task_type_public_id");

                    b.ToTable("task_type", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Core.TaskTypeAccount", b =>
                {
                    b.Property<string>("TaskType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("task_type");

                    b.Property<string>("Estate")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("estate");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("account");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("TaskType", "Estate")
                        .HasName("pk_task_type_account");

                    b.ToTable("task_type_account", "core");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.RolePermission", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("Agrovet.Domain.Entity.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.UserRole", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Agrovet.Domain.Entity.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
