// <auto-generated />
using System;
using Agrovet.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agrovet.Infrastructure.Migrations
{
    [DbContext(typeof(AgrovetContext))]
    [Migration("20251002132219_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("Feature")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("feature");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<bool>("IsBasic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_basic");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("Feature", "Action")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_feature_action");

                    b.ToTable("permission", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name");

                    b.ToTable("role", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(150)")
                        .HasColumnName("permission_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(355)
                        .HasColumnType("character varying(355)")
                        .HasColumnName("profile_image_url");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", "auth");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("telephone");

                    b.HasKey("Id")
                        .HasName("pk_branch");

                    b.ToTable("branch", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.DialogMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000);

                    b.HasKey("Id", "Lid")
                        .HasName("pk_dialog_message");

                    b.ToTable("dialog_message", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Common.MonthName", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000);

                    b.HasKey("Id", "Lid")
                        .HasName("pk_month_name");

                    b.ToTable("month_name", "common");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.ItemMovement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("id");

                    b.Property<string>("LineNum")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("line_num");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item");

                    b.Property<string>("OrderId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("order_id");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Qtty")
                        .HasColumnType("double precision")
                        .HasColumnName("qtty");

                    b.Property<string>("Sense")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sense");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("source_id");

                    b.Property<string>("SourceLineNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source_line_num");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.Property<string>("TransTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("trans_time");

                    b.HasKey("Id", "LineNum")
                        .HasName("pk_item_movement");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_item_movement_order_id");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_item_movement_public_id");

                    b.HasIndex("SourceId", "LineNum", "Item")
                        .IsUnique()
                        .HasDatabaseName("ix_item_movement_source_id_line_num_item");

                    b.ToTable("item_movement", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("order_type");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("status");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("supplier");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_public_id");

                    b.ToTable("order", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("id");

                    b.Property<string>("LineNum")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("line_num");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Qtty")
                        .HasColumnType("double precision")
                        .HasColumnName("qtty");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("status");

                    b.Property<double>("UnitCost")
                        .HasColumnType("double precision")
                        .HasColumnName("unit_cost");

                    b.HasKey("Id", "LineNum")
                        .HasName("pk_order_detail");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_detail_public_id");

                    b.ToTable("order_detail", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.OrderStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("pk_order_status");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_order_status_name");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_status_public_id");

                    b.ToTable("order_status", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.OrderType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("pk_order_type");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_order_type_name");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_type_public_id");

                    b.ToTable("order_type", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("id");

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("brand_code");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001);

                    b.Property<double>("MaxStock")
                        .HasPrecision(15, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("max_stock");

                    b.Property<double>("MinStock")
                        .HasPrecision(15, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("min_stock");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000);

                    b.Property<double>("ReorderLev")
                        .HasPrecision(15, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("reorder_lev");

                    b.Property<double>("ReorderQtty")
                        .HasPrecision(15, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("reorder_qtty");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sku");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("BrandCode")
                        .HasDatabaseName("ix_product_brand_code");

                    b.HasIndex("Category")
                        .HasDatabaseName("ix_product_category");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_public_id");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("ix_product_sku");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_product_status");

                    b.HasIndex("BrandCode", "Category")
                        .HasDatabaseName("ix_product_brand_code_category");

                    b.HasIndex("Category", "Status")
                        .HasDatabaseName("ix_product_category_status");

                    b.ToTable("product", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("pk_product_category");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_product_category_name");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_category_public_id");

                    b.ToTable("product_category", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("contact_person");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("phone");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000);

                    b.HasKey("Id")
                        .HasName("pk_supplier");

                    b.ToTable("supplier", "inventory");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Sales.DistributionChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasColumnOrder(1001)
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("public_id")
                        .HasColumnOrder(1000)
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("pk_distribution_channel");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_distribution_channel_name");

                    b.HasIndex("PublicId")
                        .IsUnique()
                        .HasDatabaseName("ix_distribution_channel_public_id");

                    b.ToTable("distribution_channel", "sales");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Sales.PriceItem", b =>
                {
                    b.Property<string>("ChannelId")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("channel_id");

                    b.Property<string>("ItemId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("item_id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_date");

                    b.HasKey("ChannelId", "ItemId")
                        .HasName("pk_price_item");

                    b.ToTable("price_item", "sales");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.RolePermission", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Auth.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("Agrovet.Domain.Entity.Auth.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.UserRole", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Auth.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Agrovet.Domain.Entity.Auth.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.ItemMovement", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Inventory.Order", null)
                        .WithMany("ItemMovements")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_item_movement_order_set_order_id");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.OrderDetail", b =>
                {
                    b.HasOne("Agrovet.Domain.Entity.Inventory.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detail_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.Product", b =>
                {
                    b.OwnsOne("Agrovet.Domain.ValueObjects.PackagingType", "PackagingType", b1 =>
                        {
                            b1.Property<string>("ProductId")
                                .HasColumnType("character varying(50)")
                                .HasColumnName("id");

                            b1.Property<string>("DisplayName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("packaging_type_display_name");

                            b1.Property<decimal>("SizeInLiters")
                                .HasPrecision(5, 2)
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("packaging_type_size_in_liters");

                            b1.Property<int>("UnitsPerBox")
                                .HasColumnType("integer")
                                .HasColumnName("packaging_type_units_per_box");

                            b1.HasKey("ProductId");

                            b1.ToTable("product", "inventory");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_product_product_id");
                        });

                    b.Navigation("PackagingType")
                        .IsRequired();
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Auth.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Agrovet.Domain.Entity.Inventory.Order", b =>
                {
                    b.Navigation("ItemMovements");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
